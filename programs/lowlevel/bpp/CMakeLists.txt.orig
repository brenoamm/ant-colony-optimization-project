# Top CMakeLists.txt     
cmake_minimum_required(VERSION 3.5)
project(aco_cuda_bpp)

# required macros
include(CheckCXXCompilerFlag)
enable_testing()


# config status messages
message(STATUS "Host System: " ${CMAKE_HOST_SYSTEM})

message(STATUS "compiler id: " ${CMAKE_CXX_COMPILER_ID})
message(STATUS "compiler flags: " ${CMAKE_CXX_FLAGS})
message(STATUS "compiler flags debug: " ${CMAKE_CXX_FLAGS_DEBUG})
message(STATUS "compiler flags release: " ${CMAKE_CXX_FLAGS_RELEASE})
message(STATUS "compiler flags minsizerel: " ${CMAKE_CXX_FLAGS_MINSIZEREL})
message(STATUS "compiler flags relwithdebinfo: " ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})


# output path for binaries and libraries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")


find_package(MPI REQUIRED)
### this is a cmake bug: MPI link flags are preceeded by two whitespaces, which leads to one leading whitespace, which is now an error according to policy CMP0004.
string(STRIP "${MPI_CXX_LINK_FLAGS}" MPI_CXX_LINK_FLAGS)

message(STATUS "mpi compiler: " ${MPI_CXX_COMPILER})
message(STATUS "mpi compile flags: " ${MPI_CXX_COMPILE_FLAGS})
message(STATUS "mpi link flags: " ${MPI_CXX_LINK_FLAGS})
message(STATUS "mpi libraries: " ${MPI_CXX_LIBRARIES})

find_package(CUDA)

## set compiler for CUDA Host Code
set(CUDA_HOST_COMPILATION_CPP ON)
set(CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})

## set compiler flags for SEQ, CPU, PHI, and GPU

# check supported flags
# common
CHECK_CXX_COMPILER_FLAG(-Wall compiler_flag_wall)
CHECK_CXX_COMPILER_FLAG(-march=native compiler_flag_marchnative)
CHECK_CXX_COMPILER_FLAG(-fno-strict-aliasing compiler_flag_fno_strict_aliasing)
CHECK_CXX_COMPILER_FLAG(-DMPICH_IGNORE_CXX_SEEK compiler_flag_dmpich_ignore_cxx_seek)

# seq
CHECK_CXX_COMPILER_FLAG(-Wno-unknown-pragmas compiler_flag_wno_unknown_pragmas)

# phi
CHECK_CXX_COMPILER_FLAG(-Wno-reorder compiler_flag_wno_reorder)
CHECK_CXX_COMPILER_FLAG(-mmic compiler_flag_mmic)
CHECK_CXX_COMPILER_FLAG(-vec-report1 compiler_flag_vec_report1)
CHECK_CXX_COMPILER_FLAG(-DMPICH_SKIP_MPICXX compiler_flag_dmpich_skip_mpicxx)

if(CUDA_FOUND)
    set(BUILD_GPU true)
endif(CUDA_FOUND)

# set the supported flags
if(compiler_flag_wall)
    set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -Wall)
    set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-Wall\"")
endif(compiler_flag_wall)

if(compiler_flag_marchnative)
    set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -march=native)
    set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-march=native\"")
endif(compiler_flag_marchnative)

if(compiler_flag_fno_strict_aliasing)
    set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -fno-strict-aliasing)
    set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-fno-strict-aliasing\"")
endif(compiler_flag_fno_strict_aliasing)

if(compiler_flag_dmpich_ignore_cxx_seek)
    set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -DMPICH_IGNORE_CXX_SEEK)
    set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-DMPICH_IGNORE_CXX_SEEK\"")
endif(compiler_flag_dmpich_ignore_cxx_seek)

# seq
if(compiler_flag_wno_unknown_pragmas)
    set(SEQ_COMPILER_OPTIONS ${SEQ_COMPILER_OPTIONS} -Wno-unknown-pragmas)
endif(compiler_flag_wno_unknown_pragmas)

# Phi
if(compiler_flag_wno_reorder)
    set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -Wno-reorder)
endif(compiler_flag_wno_reorder)

if(compiler_flag_mmic)
    set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -mmic)
endif(compiler_flag_mmic)

if(compiler_flag_vec_report1)
    set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -vec-report1)
endif(compiler_flag_vec_report1)

if(compiler_flag_dmpich_skip_mpicxx)
    set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -DMPICH_SKIP_MPICXX)
endif(compiler_flag_dmpich_skip_mpicxx)



## special treatment for CUDA
if(BUILD_GPU)
    #include directories and 
    CUDA_INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/include/detail ${MPI_CXX_INCLUDE_PATH})

    ## NVCC flags
    SET(CUDA_PROPAGATE_HOST_FLAGS "OFF") # these are manually set via -Xcompiler flag ( -Xcompiler "-flag -flag" )

<<<<<<< HEAD:BPP/source/CMakeLists.txt
    set(GPU_COMPILER_OPTIONS "-arch=compute_50 -code=sm_50 --use_fast_math") # C++11 lambdas are still experimental in CUDA 7.5. This flag may be removed with CUDA 8.0 
=======
    set(GPU_COMPILER_OPTIONS "-arch=compute_75 -code=sm_75 --use_fast_math") # C++11 lambdas are still experimental in CUDA 7.5. This flag may be removed with CUDA 8.0 
>>>>>>> c4247ce84f73bcecb3310c85fdf2a35893b542e1:BPP/LowLevelProgram/source/CMakeLists.txt
    set(GPU_COMPILER_OPTIONS_DEBUG "-g;-G;-O0")
    set(GPU_COMPILER_OPTIONS_RELEASE "-O3")
    set(GPU_COMPILER_OPTIONS_MINSIZEREL "-O2")
    set(GPU_COMPILER_OPTIONS_RELWITHDEBINFO "-g;-G;-O2")

    string(CONCAT GPU_HOST_COMPILER_OPTIONS_DEBUG "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_DEBUG})
    string(CONCAT GPU_HOST_COMPILER_OPTIONS_RELEASE "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_RELEASE})
    string(CONCAT GPU_HOST_COMPILER_OPTIONS_MINSIZEREL "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_MINSIZEREL})
    string(CONCAT GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_RELWITHDEBINFO})

endif(BUILD_GPU)

##################################################################################################################################
###############   build ACO
##################################################################################################################################

find_package(Boost COMPONENTS program_options timer)

if(Boost_FOUND)
	message(STATUS "Boost include path: " ${Boost_INCLUDE_DIR})

if(BUILD_GPU)
CUDA_ADD_EXECUTABLE(aco_cuda_v2_ref ${PROJECT_SOURCE_DIR}/src/aco_v2_cuda.cu ${PROJECT_SOURCE_DIR}/src/aco_v2_cuda_algorithm.cu OPTIONS ${GPU_COMPILER_OPTIONS} DEBUG ${GPU_COMPILER_OPTIONS_DEBUG} ${GPU_HOST_COMPILER_OPTIONS_DEBUG} RELEASE ${GPU_COMPILER_OPTIONS_RELEASE} ${GPU_HOST_COMPILER_OPTIONS_RELEASE} RELWITHDEBINFO ${GPU_COMPILER_OPTIONS_RELWITHDEBINFO} ${GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO} MINSIZEREL ${GPU_COMPILER_OPTIONS_MINSIZEREL} ${GPU_HOST_COMPILER_OPTIONS_MINSIZEREL}) 
target_include_directories(aco_cuda_v2_ref PUBLIC ${Boost_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(aco_cuda_v2_ref ${Boost_LIBRARIES} rt)

CUDA_ADD_EXECUTABLE(aco_cuda_v3_ref ${PROJECT_SOURCE_DIR}/src/aco_v3_cuda.cu ${PROJECT_SOURCE_DIR}/src/aco_v3_cuda_algorithm.cu OPTIONS ${GPU_COMPILER_OPTIONS} DEBUG ${GPU_COMPILER_OPTIONS_DEBUG} ${GPU_HOST_COMPILER_OPTIONS_DEBUG} RELEASE ${GPU_COMPILER_OPTIONS_RELEASE} ${GPU_HOST_COMPILER_OPTIONS_RELEASE} RELWITHDEBINFO ${GPU_COMPILER_OPTIONS_RELWITHDEBINFO} ${GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO} MINSIZEREL ${GPU_COMPILER_OPTIONS_MINSIZEREL} ${GPU_HOST_COMPILER_OPTIONS_MINSIZEREL}) 
target_include_directories(aco_cuda_v3_ref PUBLIC ${Boost_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(aco_cuda_v3_ref ${Boost_LIBRARIES} rt)

endif(BUILD_GPU)
endif(Boost_FOUND)

file(COPY ${PROJECT_SOURCE_DIR}/bpp/Falkenauer_t60_00.txt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${PROJECT_SOURCE_DIR}/bpp/201_2500_NR_0.txt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${PROJECT_SOURCE_DIR}/bpp/402_10000_NR_0.txt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${PROJECT_SOURCE_DIR}/bpp/600_20000_NR_0.txt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${PROJECT_SOURCE_DIR}/bpp/801_40000_NR_0.txt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${PROJECT_SOURCE_DIR}/bpp/1002_80000_NR_0.txt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

